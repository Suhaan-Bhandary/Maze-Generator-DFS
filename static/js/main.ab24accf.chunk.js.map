{"version":3,"sources":["MazeGeneratorVisualizer/Node/Node.jsx","algorithms/dfsRecursive.js","MazeGeneratorVisualizer/MazeGeneratorVisualizer.jsx","App.js","reportWebVitals.js","index.js"],"names":["Node","props","state","this","row","col","isFinish","isStart","onMouseDown","onMouseUp","extraClassName","style","topBorder","id","className","Component","move","current","grid","nodeStack","startNode","endNode","visitedNodesInOrder","push","isVisited","kids","getKids","length","pop","node","Math","floor","random","previousNode","bottomWall","topWall","rightWall","leftWall","filter","kid","PathfindingVisualizer","componentDidMount","getGrid","points","start","finish","setState","visualizeMazeGeneration","phase","dfsRecursive","animateMazeGeneration","animateShortestPath","nodesInShortestPathOrder","finishNode","currentNode","unshift","getNodesInShortestPathOrder","i","setTimeout","document","getElementById","classList","add","pointChangeHandler","notCorrectProperty","errorMessage","start_row","parseInt","value","start_col","finish_row","finish_col","newGrid","speedChangeHandler","changedSpeed","mazeGenerationSpeed","lengthChangeHandler","row_length","col_length","window","screen","width","dragNode","nodeElement","remove","contains","console","log","buttonContainer","onClick","exportPdf","actionContainer","htmlFor","type","min","max","name","onChange","defaultValue","color","href","target","toggleMenu","map","rowIndex","nodeIndex","handleMouseDown","handleMouseUp","currentRow","createNode","distance","Infinity","row_max_length","col_max_length","isNaN","querySelector","toggle","element","table","rows","cell","j","cells","html2canvas","then","canvas","imgData","toDataURL","doc","jspdf","imgHeight","height","text","addImage","save","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.ab24accf.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      row,\r\n      col,\r\n\r\n      isFinish,\r\n      isStart,\r\n\r\n      onMouseDown,\r\n      onMouseUp,\r\n    } = this.props;\r\n\r\n    let styles = {\r\n      topBorder: null,\r\n    };\r\n\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : \"\";\r\n\r\n    return (\r\n      <td\r\n        style={styles}\r\n        id={`node-${row}-${col}`}\r\n        className={`node dimension ${extraClassName}`}\r\n\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n      ></td>\r\n    );\r\n  }\r\n}\r\n","export function dfsRecursive(grid, startNode, endNode) {\r\n  let visitedNodesInOrder = [];\r\n  let nodeStack = [];\r\n\r\n  move(startNode, grid, nodeStack, startNode, endNode, visitedNodesInOrder);\r\n\r\n  return visitedNodesInOrder;\r\n}\r\n\r\nconst move = (\r\n  current,\r\n  grid,\r\n  nodeStack,\r\n  startNode,\r\n  endNode,\r\n  visitedNodesInOrder\r\n) => {\r\n  visitedNodesInOrder.push(current);\r\n  current.isVisited = true;\r\n\r\n  let kids = getKids(current, grid);\r\n\r\n  if (kids.length === 0) {\r\n    if (nodeStack.length === 0) return;\r\n    current = nodeStack.pop();\r\n  } else {\r\n    let node = kids[Math.floor(Math.random() * kids.length)];\r\n\r\n    node.previousNode = current;\r\n\r\n    if (current.col === node.col) {\r\n      if (current.row < node.row) {\r\n        grid[current.row][current.col].bottomWall = false;\r\n        grid[node.row][node.col].topWall = false;\r\n      } else {\r\n        grid[current.row][current.col].topWall = false;\r\n        grid[node.row][node.col].bottomWall = false;\r\n      }\r\n    } else {\r\n      if (current.col < node.col) {\r\n        grid[current.row][current.col].rightWall = false;\r\n        grid[node.row][node.col].leftWall = false;\r\n      } else {\r\n        grid[current.row][current.col].leftWall = false;\r\n        grid[node.row][node.col].rightWall = false;\r\n      }\r\n    }\r\n\r\n    current = node;\r\n    nodeStack.push(current);\r\n  }\r\n\r\n  move(current, grid, nodeStack, startNode, endNode, visitedNodesInOrder);\r\n};\r\n\r\nconst getKids = (current, grid) => {\r\n  let kids = [];\r\n  const row = current.row;\r\n  const col = current.col;\r\n\r\n  if (row > 0) kids.push(grid[row - 1][col]);\r\n  if (row < grid.length - 1) kids.push(grid[row + 1][col]);\r\n  if (col > 0) kids.push(grid[row][col - 1]);\r\n  if (col < grid[0].length - 1) kids.push(grid[row][col + 1]);\r\n\r\n  return kids.filter((kid) => !kid.isVisited);\r\n};\r\n\r\n// Backtracks from the finishNode to find the shortest path.\r\n// Only works when called *after* the dijkstra method above.\r\nexport function getNodesInShortestPathOrder(finishNode) {\r\n  const nodesInShortestPathOrder = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode !== null) {\r\n    nodesInShortestPathOrder.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return nodesInShortestPathOrder;\r\n}\r\n","import React, { Component } from \"react\";\r\n\r\nimport html2canvas from \"html2canvas\";\r\nimport jspdf from \"jspdf\";\r\n\r\nimport Node from \"./Node/Node.jsx\";\r\n\r\nimport {\r\n  dfsRecursive,\r\n  getNodesInShortestPathOrder,\r\n} from \"../algorithms/dfsRecursive.js\";\r\n\r\nimport \"./MazeGeneratorVisualizer.css\";\r\n\r\nimport { VscSettings } from \"react-icons/vsc\";\r\nimport { GrYoutube } from \"react-icons/gr\";\r\nimport { FaLinkedin } from \"react-icons/fa\";\r\nimport { FaGithub } from \"react-icons/fa\";\r\nimport { SiGmail } from \"react-icons/si\";\r\n\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    // USing this if else here beacause of the asyn nature \r\n    // and how the set is updated,which restricts allowance of accessing the state.\r\n    super(props);\r\n    if( window.screen.width < 500 ){\r\n      this.state = {\r\n        grid: [],\r\n        errorMessage: \"\",\r\n        dragNode: \"normal\",\r\n        phase: \"preMaze\", // phases can be of three types : preMaze,Maze,postMaze\r\n        mazeGenerationSpeed: 10,\r\n        points: {\r\n          start: {\r\n            row: 12,\r\n            col: 0,\r\n          },\r\n          finish: {\r\n            row: 12,\r\n            col: 9,\r\n          },\r\n        },\r\n        length: {\r\n          row: 26,\r\n          col: 10,\r\n        },\r\n      };\r\n          \r\n    }else{\r\n      this.state = {\r\n        grid: [],\r\n        errorMessage: \"\",\r\n        dragNode: \"normal\",\r\n        phase: \"preMaze\", // phases can be of three types : preMaze,Maze,postMaze\r\n        mazeGenerationSpeed: 10,\r\n        points: {\r\n          start: {\r\n            row: 12,\r\n            col: 0,\r\n          },\r\n          finish: {\r\n            row: 12,\r\n            col: 49,\r\n          },\r\n        },\r\n        length: {\r\n          row: 27,\r\n          col: 50,\r\n        },\r\n      };\r\n    }\r\n  }\r\n    \r\n\r\n  // Creating grid\r\n  componentDidMount = () => {\r\n    const grid = getGrid(\r\n      this.state.length.row,\r\n      this.state.length.col,\r\n      this.state.points.start.row,\r\n      this.state.points.start.col,\r\n      this.state.points.finish.row,\r\n      this.state.points.finish.col\r\n    );\r\n    this.setState({\r\n      grid,\r\n    });\r\n  };\r\n\r\n  visualizeMazeGeneration = () => {\r\n    this.setState({ phase: \"Maze\" });\r\n    const { grid } = this.state;\r\n    const startNode =\r\n      grid[this.state.points.start.row][this.state.points.start.col];\r\n    const finishNode =\r\n      grid[this.state.points.finish.row][this.state.points.finish.col];\r\n\r\n    const visitedNodesInOrder = dfsRecursive(grid, startNode, finishNode);\r\n    // const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    this.animateMazeGeneration(visitedNodesInOrder, grid);\r\n  };\r\n\r\n  animateMazeGeneration(visitedNodesInOrder, grid) {\r\n    for (let i = 1; i < visitedNodesInOrder.length; i++) {\r\n      setTimeout(() => {\r\n        if (i === visitedNodesInOrder.length - 1) {\r\n          this.setState({ phase: \"postMaze\" });\r\n          this.setState({\r\n            grid: grid,\r\n          });\r\n        }\r\n\r\n        const node = visitedNodesInOrder[i];\r\n        const nodeElement = document.getElementById(\r\n          `node-${node.row}-${node.col}`\r\n        );\r\n\r\n        nodeElement.classList.remove(\"node\");\r\n\r\n        if (nodeElement.classList.contains(\"node-finish\")) {\r\n          console.log(\"Finish\");\r\n        } else if (nodeElement.classList.contains(\"node-start\")) {\r\n          console.log(\"Finish\");\r\n        } else if (nodeElement.classList.contains(\"node-visited\")) {\r\n          nodeElement.classList.remove(\"node-visited\");\r\n          nodeElement.classList.add(\"RevisitedNode\");\r\n        } else {\r\n          nodeElement.classList.add(\"node-visited\"); // Initializing if not visited yet.\r\n        }\r\n\r\n        if (node.topWall) {\r\n          nodeElement.classList.add(\"topWall\");\r\n        }\r\n        if (node.rightWall) {\r\n          nodeElement.classList.add(\"rightWall\");\r\n        }\r\n        if (node.bottomWall) {\r\n          nodeElement.classList.add(\"bottomWall\");\r\n        }\r\n        if (node.leftWall) {\r\n          nodeElement.classList.add(\"leftWall\");\r\n        }\r\n      }, (300 * i) / this.state.mazeGenerationSpeed);\r\n    }\r\n  }\r\n\r\n  // Use to get or visualize the shortest path.\r\n  animateShortestPath = () => {\r\n    const finishNode = this.state.grid[this.state.points.finish.row][\r\n      this.state.points.finish.col\r\n    ];\r\n    const nodesInShortestPathOrder = getNodesInShortestPathOrder(finishNode);\r\n\r\n    for (let i = 1; i < nodesInShortestPathOrder.length - 1; i++) {\r\n      setTimeout(() => {\r\n        const node = nodesInShortestPathOrder[i];\r\n        document\r\n          .getElementById(`node-${node.row}-${node.col}`)\r\n          .classList.add(\"node-path\");\r\n      }, 50 * i);\r\n    }\r\n  };\r\n\r\n  pointChangeHandler = () => {\r\n    if (notCorrectProperty(this.state.length.row, this.state.length.col)) {\r\n      this.setState({\r\n        errorMessage: \"Invalid Input\",\r\n      });\r\n      return;\r\n    } //To check if the provided value is suitable or not.\r\n\r\n    const start_row = parseInt(document.getElementById(\"start_row\").value);\r\n    const start_col = parseInt(document.getElementById(\"start_col\").value);\r\n    const finish_row = parseInt(document.getElementById(\"end_row\").value);\r\n    const finish_col = parseInt(document.getElementById(\"end_col\").value);\r\n\r\n    const newGrid = getGrid(\r\n      this.state.length.row,\r\n      this.state.length.col,\r\n\r\n      start_row,\r\n      start_col,\r\n      finish_row,\r\n      finish_col\r\n    );\r\n    this.setState({\r\n      grid: newGrid,\r\n      errorMessage: \"\",\r\n      points: {\r\n        start: {\r\n          row: start_row,\r\n          col: start_col,\r\n        },\r\n        finish: {\r\n          row: finish_row,\r\n          col: finish_col,\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  speedChangeHandler = () => {\r\n    const changedSpeed = parseInt(\r\n      document.getElementById(\"mazeSpeedRange\").value\r\n    );\r\n    this.setState({\r\n      mazeGenerationSpeed: changedSpeed,\r\n    });\r\n  };\r\n\r\n  lengthChangeHandler = () => {\r\n    const row_length = document.getElementById(\"row_length\").value;\r\n    const col_length = document.getElementById(\"col_length\").value;\r\n\r\n    if (row_length > 50 || col_length > 50) {\r\n      this.setState({\r\n        errorMessage: \"Invalid Size\",\r\n      });\r\n      return;\r\n    }\r\n\r\n    // Getting new grid.\r\n    const newGrid = getGrid(\r\n      row_length,\r\n      col_length,\r\n      0,\r\n      0,\r\n      row_length - 1,\r\n      col_length - 1\r\n    );\r\n\r\n    // Changing the new value of the input elements :\r\n    document.getElementById(\"start_row\").value = 0;\r\n    document.getElementById(\"start_col\").value = 0;\r\n    document.getElementById(\"end_row\").value = row_length - 1;\r\n    document.getElementById(\"end_col\").value = col_length - 1;\r\n\r\n    // Assing new values.\r\n    this.setState({\r\n      grid: newGrid,\r\n      errorMessage: \"\",\r\n      points: {\r\n        start: {\r\n          row: 0,\r\n          col: 0,\r\n        },\r\n        finish: {\r\n          row: row_length - 1,\r\n          col: col_length - 1,\r\n        },\r\n      },\r\n      length: {\r\n        row: row_length,\r\n        col: col_length,\r\n      },\r\n    });\r\n  };\r\n\r\n  // On pressing the mouse down\r\n  handleMouseDown(row, col) {\r\n    if (this.state.grid[row][col].isStart) {\r\n      this.setState({ dragNode: \"start\" });\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      this.setState({ dragNode: \"finish\" });\r\n    } else {\r\n      this.setState({ dragNode: \"normal\" });\r\n    }\r\n  }\r\n\r\n  // When we release the mouse\r\n  handleMouseUp(row, col) {\r\n    let start_row = this.state.points.start.row;\r\n    let start_col = this.state.points.start.col;\r\n    let finish_row = this.state.points.finish.row;\r\n    let finish_col = this.state.points.finish.col;\r\n\r\n    if (this.state.dragNode === \"start\") {\r\n      start_row = row;\r\n      start_col = col;\r\n    } else if (this.state.dragNode === \"finish\") {\r\n      finish_row = row;\r\n      finish_col = col;\r\n    } else {\r\n      return;\r\n    }\r\n\r\n    const newGrid = getGrid(\r\n      this.state.length.row,\r\n      this.state.length.col,\r\n\r\n      start_row,\r\n      start_col,\r\n      finish_row,\r\n      finish_col\r\n    );\r\n    this.setState({\r\n      grid: newGrid,\r\n      errorMessage: \"\",\r\n      points: {\r\n        start: {\r\n          row: start_row,\r\n          col: start_col,\r\n        },\r\n        finish: {\r\n          row: finish_row,\r\n          col: finish_col,\r\n        },\r\n      },\r\n    });\r\n\r\n    document.getElementById(\"start_row\").value = start_row;\r\n    document.getElementById(\"start_col\").value = start_col;\r\n    document.getElementById(\"end_row\").value = finish_row;\r\n    document.getElementById(\"end_col\").value = finish_col;\r\n  }\r\n\r\n  render() {\r\n    \r\n    let buttonContainer = <p>System Error !!!</p>;\r\n\r\n    if (this.state.phase === \"preMaze\") {\r\n      buttonContainer = (\r\n        <div className=\"buttonContainer\">\r\n          <button onClick={this.visualizeMazeGeneration}> Maze </button>\r\n          <button onClick={exportPdf}> Screenshot </button>\r\n        </div>\r\n      );\r\n    } else if (this.state.phase === \"Maze\") {\r\n      buttonContainer = (\r\n        <div className=\"buttonContainer\">\r\n          <button> Generating..</button>\r\n          <button onClick={exportPdf}> Screenshot </button>\r\n        </div>\r\n      );\r\n    } else if (this.state.phase === \"postMaze\") {\r\n      buttonContainer = (\r\n        <div className=\"buttonContainer\">\r\n          <button onClick={this.animateShortestPath}> Path </button>\r\n          <button onClick={exportPdf}> Screenshot </button>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    let actionContainer = <div></div>;\r\n    if (this.state.phase === \"preMaze\") {\r\n      actionContainer = (\r\n        <div className=\"title\">\r\n          <label htmlFor=\"heightSlider\"> Height : {this.state.length.row}</label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"row_length\"\r\n            min=\"1\"\r\n            max=\"50\"\r\n            name=\"heightSlider\"\r\n            onChange={this.lengthChangeHandler}\r\n            defaultValue={this.state.length.row}\r\n          ></input>\r\n\r\n          <label htmlFor=\"widthSlider\"> Width : {this.state.length.col}</label>\r\n          <input\r\n            type=\"range\"\r\n            id=\"col_length\"\r\n            min=\"1\"\r\n            max=\"50\"\r\n            name=\"widthSlider\"\r\n            onChange={this.lengthChangeHandler}\r\n            defaultValue={this.state.length.col}\r\n          ></input>\r\n\r\n          <label htmlFor=\"speedSlider\"> Maze Generation Speed: </label>\r\n          <input\r\n            type=\"range\"\r\n            min=\"1\"\r\n            max=\"20\"\r\n            defaultValue=\"10\"\r\n            name=\"speedSlider\"\r\n            id=\"mazeSpeedRange\"\r\n            onChange={this.speedChangeHandler}\r\n          />\r\n\r\n          <div className=\"startPointContainer\">\r\n            <label htmlFor=\"point\"> Start Point: </label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"start_row\"\r\n              min=\"0\"\r\n              max={this.state.length.row - 1}\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.start.row}\r\n            ></input>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"start_col\"\r\n              min=\"0\"\r\n              max={this.state.length.col - 1}\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.start.col}\r\n            ></input>\r\n          </div>\r\n\r\n          <div className=\"endPointContainer\">\r\n            <label htmlFor=\"point\"> End Point: </label>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"end_row\"\r\n              min=\"0\"\r\n              max=\"50\"\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.finish.row}\r\n            ></input>\r\n            <input\r\n              type=\"number\"\r\n              name=\"point\"\r\n              id=\"end_col\"\r\n              min=\"0\"\r\n              max=\"50\"\r\n              onChange={this.pointChangeHandler}\r\n              defaultValue={this.state.points.finish.col}\r\n            ></input>\r\n          </div>\r\n          <p\r\n            style={{\r\n              color: \"red\",\r\n            }}\r\n          >\r\n            {this.state.errorMessage}\r\n          </p>\r\n        </div>\r\n      );\r\n    } else {\r\n      actionContainer = (\r\n        <div className=\"About\">\r\n          <h1 className=\"aboutHeading\">About Me</h1>\r\n          <p className=\"aboutDescription\">\r\n            As a child I always solved the mazes which were on the newspapers and also built them by hand on pages,\r\n            and when learning programming I thought how mazes are made and with the curiosity in mind my interest in programming grew more.\r\n            <br></br>\r\n            And because of it i feel every one should be curious about the things and how the happen.\r\n            And at last : This program runs using a simple DFSrecursive Algorithm,\r\n             one can take it as a refrence point and build using other algorithms.\r\n          </p>\r\n          <h3 className=\"aboutCreatorName\">-Suhaan Bhandary</h3>\r\n          <div className=\"aboutLinks\">\r\n            <a\r\n              href=\"https://www.youtube.com/channel/UCHfmmdKuRDmZ5EUzGdqI7-Q\" target = \"blank\"\r\n              className=\"aboutYoutube\"\r\n            >\r\n              <GrYoutube />\r\n            </a>\r\n            <a\r\n              href=\"https://www.linkedin.com/in/suhaan-bhandary-5bb907205/\" target = \"blank\"\r\n              className=\"aboutLinkedin\"\r\n            >\r\n              <FaLinkedin/>\r\n            </a>\r\n            <a\r\n              href=\"https://github.com/Suhaan-Bhandary\" target = \"blank\"\r\n              className=\"aboutGithub\"\r\n            >\r\n              <FaGithub/>\r\n            </a>\r\n            <p\r\n              className=\"aboutGmail\"\r\n            >\r\n              <SiGmail/> suhaanbhandary1@gmail.com\r\n              \r\n            </p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <div className=\"MazeGeneratorVisualizer\">\r\n        <div className=\"header\">\r\n          <h1 className=\"appName\">Maze Generator</h1>\r\n          {buttonContainer}\r\n        </div>\r\n\r\n        <div className=\"navigation\">\r\n          <ul>\r\n            <li>\r\n              <div>\r\n                <span className=\"icon\"><VscSettings /></span>\r\n                {actionContainer}\r\n              </div>\r\n            </li>\r\n          </ul>\r\n        </div>\r\n        <div className=\"toggle\" onClick={toggleMenu}>\r\n        <VscSettings />\r\n        </div>\r\n\r\n        <div className=\"mazeContainer\">\r\n          <table className=\"maze\" id=\"table\">\r\n            <tbody>\r\n              {this.state.grid.map((row, rowIndex) => {\r\n                return (\r\n                  <tr key={rowIndex}>\r\n                    {row.map((node, nodeIndex) => {\r\n                      const { isStart, isFinish } = node; //Extracting from the node\r\n                      return (\r\n                        <Node\r\n                          row={rowIndex}\r\n                          col={nodeIndex}\r\n                          key={rowIndex + \"-\" + nodeIndex}\r\n                          isStart={isStart}\r\n                          isFinish={isFinish}\r\n                          onMouseDown={(row, col) =>\r\n                            this.handleMouseDown(row, col)\r\n                          }\r\n                          onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                        ></Node>\r\n                      );\r\n                    })}\r\n                  </tr>\r\n                );\r\n              })}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n// Function to get grid initially and when changing.\r\nconst getGrid = (\r\n  row_length,\r\n  col_length,\r\n  start_row,\r\n  start_col,\r\n  finish_row,\r\n  finish_col\r\n) => {\r\n  const grid = [];\r\n  for (let row = 0; row < row_length; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < col_length; col++) {\r\n      currentRow.push(\r\n        createNode(col, row, start_row, start_col, finish_row, finish_col)\r\n      );\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n\r\nconst createNode = (col, row, start_row, start_col, finish_row, finish_col) => {\r\n  return {\r\n    col,\r\n    row,\r\n    isStart: row === start_row && col === start_col,\r\n    isFinish: row === finish_row && col === finish_col,\r\n    distance: Infinity,\r\n    isVisited: false,\r\n    previousNode: null,\r\n\r\n    topWall: true,\r\n    rightWall: true,\r\n    bottomWall: true,\r\n    leftWall: true,\r\n  };\r\n};\r\n\r\nconst notCorrectProperty = (row_max_length, col_max_length) => {\r\n  if (\r\n    isNaN(parseInt(document.getElementById(\"start_row\").value)) ||\r\n    isNaN(parseInt(document.getElementById(\"start_col\").value)) ||\r\n    isNaN(parseInt(document.getElementById(\"end_row\").value)) ||\r\n    isNaN(parseInt(document.getElementById(\"end_col\").value))\r\n  )\r\n    return true;\r\n\r\n  if (\r\n    parseInt(document.getElementById(\"start_row\").value) > row_max_length ||\r\n    parseInt(document.getElementById(\"start_col\").value) > col_max_length\r\n  )\r\n    return true;\r\n  if (\r\n    parseInt(document.getElementById(\"start_row\").value) < 0 ||\r\n    parseInt(document.getElementById(\"start_col\").value) < 0\r\n  )\r\n    return true;\r\n\r\n  if (\r\n    parseInt(document.getElementById(\"end_row\").value) > row_max_length ||\r\n    parseInt(document.getElementById(\"end_col\").value) > col_max_length\r\n  )\r\n    return true;\r\n  if (\r\n    parseInt(document.getElementById(\"end_row\").value) < 0 ||\r\n    parseInt(document.getElementById(\"end_col\").value) < 0\r\n  )\r\n    return true;\r\n\r\n  return false;\r\n};\r\n\r\nconst toggleMenu = () => {\r\n  let navigation = document.querySelector(\".navigation\");\r\n  navigation.classList.toggle(\"active\");\r\n\r\n  let toggle = document.querySelector(\".toggle\");\r\n  toggle.classList.toggle(\"active\");\r\n};\r\n\r\n// We export pdf from here.\r\nconst exportPdf = () => {\r\n  // We are storing the element from its id.\r\n  const element = document.querySelector(\".mazeContainer\");\r\n\r\n  // This is to remove class revisitedNode as it was causing problem for html2canvas.\r\n  var table = document.getElementById(\"table\"); // Get the table\r\n  for (var i = 0, row; (row = table.rows[i]); i++) {\r\n    for (var j = 0, cell; (cell = row.cells[j]); j++) {\r\n      cell.classList.remove(\"RevisitedNode\");\r\n    }\r\n  }\r\n\r\n  // html2canvas catures a screenshot or a picture and by using then we execute the function.\r\n  html2canvas(element).then((canvas) => {\r\n    // document.getElementById(\"canvas\").appendChild(canvas); to test the canvas element.\r\n\r\n    const imgData = canvas.toDataURL(\"image/png\"); // Creating image or png.\r\n\r\n    const doc = new jspdf();\r\n\r\n    // doc.addImage(imgData,imgPositionX,imgPositionY,width,height);\r\n    const imgHeight = (canvas.height * 205) / canvas.width;\r\n    doc.text(\"Maze\", 98, 10);\r\n\r\n    doc.addImage(imgData, 0, 12, 205, imgHeight);\r\n    doc.save(\"maze.pdf\");\r\n  });\r\n};\r\n","import './App.css';\nimport MazeGeneratorVisualizer from \"./MazeGeneratorVisualizer/MazeGeneratorVisualizer.jsx\";\n\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <MazeGeneratorVisualizer></MazeGeneratorVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}